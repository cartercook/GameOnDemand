using System.Collections;using System.Collections.Generic;using System;using UnityEngine;public class Controls : MonoBehaviour {    public static Controls Instance;    public Collider2D hoe;    public Collider2D seedPile;    public Collider2D wateringCan;    public Collider2D glove;    public enum Mode { gathering_seeds, tilling, planting, watering, pulling };    public static Mode mode = Mode.gathering_seeds;    void Start()    {        // singleton        Instance = this;        // distinct mouse and touch events        Input.simulateMouseWithTouches = false;    }    		// Update is called once per frame	void Update ()    {        foreach (Touch touch in GetTouchesAndMouse())        {            handleTouch(touch);        }	}    void handleTouch(Touch touch)    {        // translate from screen coordinates        Vector2 touchPos = Camera.main.ScreenToWorldPoint(touch.position);        if (touch.phase == TouchPhase.Moved || touch.phase == TouchPhase.Stationary) {                    }        Tree tree = GetComponentAtPos<Tree>(touchPos, "Tree");        if (tree != null)        {            if (touch.phase == TouchPhase.Began)            {
                tree.DropSeeds();            }        }        else        {            CollectNutsAtPosition(touchPos);        }    }    void CollectNutsAtPosition(Vector2 position)    {        foreach (GameObject nut in GameObject.FindGameObjectsWithTag("Nut"))        {            if (Vector2.Distance(position, nut.transform.position) <= 150)            {                nut.GetComponent<Nut>().GoToNutPile();            }        }    }    public static T GetComponentAtPos<T>(Vector2 position, string layerName) where T:Component    {        T component = null;        // detect object at touch point        Collider2D collider = Physics2D.OverlapPoint(position, 1 << LayerMask.NameToLayer(layerName));
        //print(System.Convert.ToString(~LayerMask.NameToLayer(layerName), 2) + ", " + layerName);        if (collider != null)        {            component = collider.GetComponent<T>();        }        return component;    }    // treat the mouse as a touch    public static Touch[] GetTouchesAndMouse()    {        bool usingMouse = false;        Touch mouseTouch = new Touch();        if (Input.GetMouseButtonDown(0))        {            usingMouse = true;            mouseTouch.phase = TouchPhase.Began;        }        else if (Input.GetMouseButton(0))        {            usingMouse = true;            mouseTouch.phase = TouchPhase.Moved;        }        else if (Input.GetMouseButtonUp(0))        {            usingMouse = true;            mouseTouch.phase = TouchPhase.Ended;        }        Touch[] touches = Input.touches;        if (usingMouse)        {            // append mouseTouch to touches            mouseTouch.position = Input.mousePosition;            Array.Resize(ref touches, touches.Length + 1);            touches[touches.Length - 1] = mouseTouch;        }        return touches;    }}